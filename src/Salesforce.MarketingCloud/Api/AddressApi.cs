/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RestSharp.Authenticators;
using Salesforce.MarketingCloud.Authentication;
using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// validateEmail
        /// </summary>
        /// <remarks>
        /// Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>ResponseValidateEmail200</returns>
        ResponseValidateEmail200 AddressV1ValidateEmailPost (RequestValidateEmail body = null);

        /// <summary>
        /// validateEmail
        /// </summary>
        /// <remarks>
        /// Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>ApiResponse of ResponseValidateEmail200</returns>
        ApiResponse<ResponseValidateEmail200> AddressV1ValidateEmailPostWithHttpInfo (RequestValidateEmail body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// validateEmail
        /// </summary>
        /// <remarks>
        /// Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>Task of ResponseValidateEmail200</returns>
        System.Threading.Tasks.Task<ResponseValidateEmail200> AddressV1ValidateEmailPostAsync (RequestValidateEmail body = null);

        /// <summary>
        /// validateEmail
        /// </summary>
        /// <remarks>
        /// Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseValidateEmail200)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseValidateEmail200>> AddressV1ValidateEmailPostAsyncWithHttpInfo (RequestValidateEmail body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressApi : IAddressApi
    {
        private Salesforce.MarketingCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope)
        {
            this.Configuration = new Salesforce.MarketingCloud.Client.Configuration
            {
                AuthenticationInstanceUrl = authBasePath,
                ClientId = clientId,
                ClientSecret = clientSecret,
                AccountId = accountId,
                Scope = scope
            };

            var defaultDateTimeProvider = new DefaultDateTimeProvider();
            var cacheService = new CacheService(defaultDateTimeProvider);
            var apiClient = new ApiClient(authBasePath);
            var authService = new AuthService(this.Configuration, apiClient, cacheService);

            this.Configuration.ApiClient.RestClient.Authenticator =
                new Salesforce.MarketingCloud.Authentication.OAuth2Authenticator(authService);

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal AddressApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope, IAuthenticator authenticator)
            : this(authBasePath, clientId, clientSecret, accountId, scope)
        {
            this.Configuration.ApiClient.RestClient.Authenticator = authenticator;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressApi(Salesforce.MarketingCloud.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Salesforce.MarketingCloud.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Salesforce.MarketingCloud.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Salesforce.MarketingCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// validateEmail Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>ResponseValidateEmail200</returns>
        public ResponseValidateEmail200 AddressV1ValidateEmailPost (RequestValidateEmail body = null)
        {
             ApiResponse<ResponseValidateEmail200> localVarResponse = AddressV1ValidateEmailPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// validateEmail Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>ApiResponse of ResponseValidateEmail200</returns>
        public ApiResponse< ResponseValidateEmail200 > AddressV1ValidateEmailPostWithHttpInfo (RequestValidateEmail body = null)
        {

            var localVarPath = "/address/v1/validateEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressV1ValidateEmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseValidateEmail200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseValidateEmail200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseValidateEmail200)));
        }

        /// <summary>
        /// validateEmail Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>Task of ResponseValidateEmail200</returns>
        public async System.Threading.Tasks.Task<ResponseValidateEmail200> AddressV1ValidateEmailPostAsync (RequestValidateEmail body = null)
        {
             ApiResponse<ResponseValidateEmail200> localVarResponse = await AddressV1ValidateEmailPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// validateEmail Validates an email by specifying the email address and validators to be used in the request body of the HTTP POST. You can use more than one validator in the same call.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseValidateEmail200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseValidateEmail200>> AddressV1ValidateEmailPostAsyncWithHttpInfo (RequestValidateEmail body = null)
        {

            var localVarPath = "/address/v1/validateEmail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressV1ValidateEmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseValidateEmail200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseValidateEmail200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseValidateEmail200)));
        }

    }
}
