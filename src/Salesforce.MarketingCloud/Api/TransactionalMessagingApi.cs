/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RestSharp.Authenticators;
using Salesforce.MarketingCloud.Authentication;
using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionalMessagingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        RequestCreateEmailDefinition CreateEmailDefinition (RequestCreateEmailDefinition body = null);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        ApiResponse<RequestCreateEmailDefinition> CreateEmailDefinitionWithHttpInfo (RequestCreateEmailDefinition body = null);
        /// <summary>
        /// createSMSDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        RequestCreateSMSDefinition CreateSMSDefinition (RequestCreateSMSDefinition body = null);

        /// <summary>
        /// createSMSDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        ApiResponse<RequestCreateSMSDefinition> CreateSMSDefinitionWithHttpInfo (RequestCreateSMSDefinition body = null);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ResponseDeleteSendDefinition</returns>
        ResponseDeleteSendDefinition DeleteEmailDefinition (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of ResponseDeleteSendDefinition</returns>
        ApiResponse<ResponseDeleteSendDefinition> DeleteEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ResponseDeleteQueuedMessagesForSendDefinition</returns>
        ResponseDeleteQueuedMessagesForSendDefinition DeleteQueuedMessagesForEmailDefinition (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ResponseDeleteQueuedMessagesForSendDefinition</returns>
        ResponseDeleteQueuedMessagesForSendDefinition DeleteQueuedMessagesForSMSDefinition (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForSMSDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ResponseDeleteSendDefinition</returns>
        ResponseDeleteSendDefinition DeleteSMSDefinition (string definitionKey);

        /// <summary>
        /// deleteSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of ResponseDeleteSendDefinition</returns>
        ApiResponse<ResponseDeleteSendDefinition> DeleteSMSDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        RequestCreateEmailDefinition GetEmailDefinition (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        ApiResponse<RequestCreateEmailDefinition> GetEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ResponseGetEmailDefinitions</returns>
        ResponseGetEmailDefinitions GetEmailDefinitions (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of ResponseGetEmailDefinitions</returns>
        ApiResponse<ResponseGetEmailDefinitions> GetEmailDefinitionsWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ResponseGetDefinitionSendStatusForRecipient</returns>
        ResponseGetDefinitionSendStatusForRecipient GetEmailSendStatusForRecipient (string messageKey);

        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of ResponseGetDefinitionSendStatusForRecipient</returns>
        ApiResponse<ResponseGetDefinitionSendStatusForRecipient> GetEmailSendStatusForRecipientWithHttpInfo (string messageKey);
        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ResponseGetDefinitionsNotSentToRecipients</returns>
        ResponseGetDefinitionsNotSentToRecipients GetEmailsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of ResponseGetDefinitionsNotSentToRecipients</returns>
        ApiResponse<ResponseGetDefinitionsNotSentToRecipients> GetEmailsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ResponseGetQueueMetricsForSendDefinition</returns>
        ResponseGetQueueMetricsForSendDefinition GetQueueMetricsForEmailDefinition (string definitionKey);

        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of ResponseGetQueueMetricsForSendDefinition</returns>
        ApiResponse<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForEmailDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getQueueMetricsForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ResponseGetQueueMetricsForSendDefinition</returns>
        ResponseGetQueueMetricsForSendDefinition GetQueueMetricsForSMSDefinition (string definitionKey);

        /// <summary>
        /// getQueueMetricsForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of ResponseGetQueueMetricsForSendDefinition</returns>
        ApiResponse<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForSMSDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        RequestCreateSMSDefinition GetSMSDefinition (string definitionKey);

        /// <summary>
        /// getSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        ApiResponse<RequestCreateSMSDefinition> GetSMSDefinitionWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ResponseGetSMSDefinitions</returns>
        ResponseGetSMSDefinitions GetSMSDefinitions (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getSMSDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of ResponseGetSMSDefinitions</returns>
        ApiResponse<ResponseGetSMSDefinitions> GetSMSDefinitionsWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getSMSSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ResponseGetDefinitionSendStatusForRecipient</returns>
        ResponseGetDefinitionSendStatusForRecipient GetSMSSendStatusForRecipient (string messageKey);

        /// <summary>
        /// getSMSSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of ResponseGetDefinitionSendStatusForRecipient</returns>
        ApiResponse<ResponseGetDefinitionSendStatusForRecipient> GetSMSSendStatusForRecipientWithHttpInfo (string messageKey);
        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ResponseGetDefinitionsNotSentToRecipients</returns>
        ResponseGetDefinitionsNotSentToRecipients GetSMSsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of ResponseGetDefinitionsNotSentToRecipients</returns>
        ApiResponse<ResponseGetDefinitionsNotSentToRecipients> GetSMSsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        RequestCreateEmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, RequestUpdateEmailDefinition body = null);

        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        ApiResponse<RequestCreateEmailDefinition> PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, RequestUpdateEmailDefinition body = null);
        /// <summary>
        /// partiallyUpdateSMSDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        RequestCreateSMSDefinition PartiallyUpdateSMSDefinition (string definitionKey, RequestCreateSMSDefinition body = null);

        /// <summary>
        /// partiallyUpdateSMSDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        ApiResponse<RequestCreateSMSDefinition> PartiallyUpdateSMSDefinitionWithHttpInfo (string definitionKey, RequestCreateSMSDefinition body = null);
        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToMultipleRecipients</returns>
        ResponseSendDefinitionToMultipleRecipients SendEmailToMultipleRecipients (RequestSendEmailToMultipleRecipients body = null);

        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToMultipleRecipients</returns>
        ApiResponse<ResponseSendDefinitionToMultipleRecipients> SendEmailToMultipleRecipientsWithHttpInfo (RequestSendEmailToMultipleRecipients body = null);
        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToSingleRecipient</returns>
        ResponseSendDefinitionToSingleRecipient SendEmailToSingleRecipient (string messageKey, RequestSendEmailToSingleRecipient body = null);

        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToSingleRecipient</returns>
        ApiResponse<ResponseSendDefinitionToSingleRecipient> SendEmailToSingleRecipientWithHttpInfo (string messageKey, RequestSendEmailToSingleRecipient body = null);
        /// <summary>
        /// sendSMSToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToMultipleRecipients</returns>
        ResponseSendDefinitionToMultipleRecipients SendSMSToMultipleRecipients (RequestSendSMSToMultipleRecipients body = null);

        /// <summary>
        /// sendSMSToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToMultipleRecipients</returns>
        ApiResponse<ResponseSendDefinitionToMultipleRecipients> SendSMSToMultipleRecipientsWithHttpInfo (RequestSendSMSToMultipleRecipients body = null);
        /// <summary>
        /// sendSMSToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToSingleRecipient</returns>
        ResponseSendDefinitionToSingleRecipient SendSMSToSingleRecipient (string messageKey, RequestSendSMSToSingleRecipient body = null);

        /// <summary>
        /// sendSMSToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToSingleRecipient</returns>
        ApiResponse<ResponseSendDefinitionToSingleRecipient> SendSMSToSingleRecipientWithHttpInfo (string messageKey, RequestSendSMSToSingleRecipient body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateEmailDefinition> CreateEmailDefinitionAsync (RequestCreateEmailDefinition body = null);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (RequestCreateEmailDefinition body = null);
        /// <summary>
        /// createSMSDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateSMSDefinition> CreateSMSDefinitionAsync (RequestCreateSMSDefinition body = null);

        /// <summary>
        /// createSMSDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an SMS.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> CreateSMSDefinitionAsyncWithHttpInfo (RequestCreateSMSDefinition body = null);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ResponseDeleteSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseDeleteSendDefinition> DeleteEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (ResponseDeleteSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeleteSendDefinition>> DeleteEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (ResponseDeleteQueuedMessagesForSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>> DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForSMSDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (ResponseDeleteQueuedMessagesForSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>> DeleteQueuedMessagesForSMSDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// deleteSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ResponseDeleteSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseDeleteSendDefinition> DeleteSMSDefinitionAsync (string definitionKey);

        /// <summary>
        /// deleteSMSDefinition
        /// </summary>
        /// <remarks>
        /// Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (ResponseDeleteSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeleteSendDefinition>> DeleteSMSDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateEmailDefinition> GetEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets email definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> GetEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ResponseGetEmailDefinitions</returns>
        System.Threading.Tasks.Task<ResponseGetEmailDefinitions> GetEmailDefinitionsAsync (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of email definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetEmailDefinitions)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetEmailDefinitions>> GetEmailDefinitionsAsyncWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ResponseGetDefinitionSendStatusForRecipient</returns>
        System.Threading.Tasks.Task<ResponseGetDefinitionSendStatusForRecipient> GetEmailSendStatusForRecipientAsync (string messageKey);

        /// <summary>
        /// getEmailSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionSendStatusForRecipient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionSendStatusForRecipient>> GetEmailSendStatusForRecipientAsyncWithHttpInfo (string messageKey);
        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ResponseGetDefinitionsNotSentToRecipients</returns>
        System.Threading.Tasks.Task<ResponseGetDefinitionsNotSentToRecipients> GetEmailsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getEmailsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionsNotSentToRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionsNotSentToRecipients>> GetEmailsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ResponseGetQueueMetricsForSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForEmailDefinitionAsync (string definitionKey);

        /// <summary>
        /// getQueueMetricsForEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (ResponseGetQueueMetricsForSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetQueueMetricsForSendDefinition>> GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getQueueMetricsForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ResponseGetQueueMetricsForSendDefinition</returns>
        System.Threading.Tasks.Task<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForSMSDefinitionAsync (string definitionKey);

        /// <summary>
        /// getQueueMetricsForSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (ResponseGetQueueMetricsForSendDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetQueueMetricsForSendDefinition>> GetQueueMetricsForSMSDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateSMSDefinition> GetSMSDefinitionAsync (string definitionKey);

        /// <summary>
        /// getSMSDefinition
        /// </summary>
        /// <remarks>
        /// Gets SMS definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> GetSMSDefinitionAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getSMSDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ResponseGetSMSDefinitions</returns>
        System.Threading.Tasks.Task<ResponseGetSMSDefinitions> GetSMSDefinitionsAsync (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getSMSDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of SMS definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetSMSDefinitions)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetSMSDefinitions>> GetSMSDefinitionsAsyncWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// getSMSSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ResponseGetDefinitionSendStatusForRecipient</returns>
        System.Threading.Tasks.Task<ResponseGetDefinitionSendStatusForRecipient> GetSMSSendStatusForRecipientAsync (string messageKey);

        /// <summary>
        /// getSMSSendStatusForRecipient
        /// </summary>
        /// <remarks>
        /// Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionSendStatusForRecipient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionSendStatusForRecipient>> GetSMSSendStatusForRecipientAsyncWithHttpInfo (string messageKey);
        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ResponseGetDefinitionsNotSentToRecipients</returns>
        System.Threading.Tasks.Task<ResponseGetDefinitionsNotSentToRecipients> GetSMSsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null);

        /// <summary>
        /// getSMSsNotSentToRecipients
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionsNotSentToRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionsNotSentToRecipients>> GetSMSsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null);
        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateEmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, RequestUpdateEmailDefinition body = null);

        /// <summary>
        /// partiallyUpdateEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, RequestUpdateEmailDefinition body = null);
        /// <summary>
        /// partiallyUpdateSMSDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        System.Threading.Tasks.Task<RequestCreateSMSDefinition> PartiallyUpdateSMSDefinitionAsync (string definitionKey, RequestCreateSMSDefinition body = null);

        /// <summary>
        /// partiallyUpdateSMSDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific SMS definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> PartiallyUpdateSMSDefinitionAsyncWithHttpInfo (string definitionKey, RequestCreateSMSDefinition body = null);
        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToMultipleRecipients</returns>
        System.Threading.Tasks.Task<ResponseSendDefinitionToMultipleRecipients> SendEmailToMultipleRecipientsAsync (RequestSendEmailToMultipleRecipients body = null);

        /// <summary>
        /// sendEmailToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToMultipleRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToMultipleRecipients>> SendEmailToMultipleRecipientsAsyncWithHttpInfo (RequestSendEmailToMultipleRecipients body = null);
        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToSingleRecipient</returns>
        System.Threading.Tasks.Task<ResponseSendDefinitionToSingleRecipient> SendEmailToSingleRecipientAsync (string messageKey, RequestSendEmailToSingleRecipient body = null);

        /// <summary>
        /// sendEmailToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToSingleRecipient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToSingleRecipient>> SendEmailToSingleRecipientAsyncWithHttpInfo (string messageKey, RequestSendEmailToSingleRecipient body = null);
        /// <summary>
        /// sendSMSToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToMultipleRecipients</returns>
        System.Threading.Tasks.Task<ResponseSendDefinitionToMultipleRecipients> SendSMSToMultipleRecipientsAsync (RequestSendSMSToMultipleRecipients body = null);

        /// <summary>
        /// sendSMSToMultipleRecipients
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToMultipleRecipients)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToMultipleRecipients>> SendSMSToMultipleRecipientsAsyncWithHttpInfo (RequestSendSMSToMultipleRecipients body = null);
        /// <summary>
        /// sendSMSToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToSingleRecipient</returns>
        System.Threading.Tasks.Task<ResponseSendDefinitionToSingleRecipient> SendSMSToSingleRecipientAsync (string messageKey, RequestSendSMSToSingleRecipient body = null);

        /// <summary>
        /// sendSMSToSingleRecipient
        /// </summary>
        /// <remarks>
        /// Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToSingleRecipient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToSingleRecipient>> SendSMSToSingleRecipientAsyncWithHttpInfo (string messageKey, RequestSendSMSToSingleRecipient body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionalMessagingApi : ITransactionalMessagingApi
    {
        private Salesforce.MarketingCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionalMessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionalMessagingApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope)
        {
            this.Configuration = new Salesforce.MarketingCloud.Client.Configuration
            {
                AuthenticationInstanceUrl = authBasePath,
                ClientId = clientId,
                ClientSecret = clientSecret,
                AccountId = accountId,
                Scope = scope
            };

            var defaultDateTimeProvider = new DefaultDateTimeProvider();
            var cacheService = new CacheService(defaultDateTimeProvider);
            var apiClient = new ApiClient(authBasePath);
            var authService = new AuthService(this.Configuration, apiClient, cacheService);

            this.Configuration.ApiClient.RestClient.Authenticator =
                new Salesforce.MarketingCloud.Authentication.OAuth2Authenticator(authService);

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionalMessagingApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal TransactionalMessagingApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope, IAuthenticator authenticator)
            : this(authBasePath, clientId, clientSecret, accountId, scope)
        {
            this.Configuration.ApiClient.RestClient.Authenticator = authenticator;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionalMessagingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionalMessagingApi(Salesforce.MarketingCloud.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Salesforce.MarketingCloud.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Salesforce.MarketingCloud.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Salesforce.MarketingCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        public RequestCreateEmailDefinition CreateEmailDefinition (RequestCreateEmailDefinition body = null)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = CreateEmailDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        public ApiResponse< RequestCreateEmailDefinition > CreateEmailDefinitionWithHttpInfo (RequestCreateEmailDefinition body = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateEmailDefinition> CreateEmailDefinitionAsync (RequestCreateEmailDefinition body = null)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = await CreateEmailDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (RequestCreateEmailDefinition body = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// createSMSDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        public RequestCreateSMSDefinition CreateSMSDefinition (RequestCreateSMSDefinition body = null)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = CreateSMSDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createSMSDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        public ApiResponse< RequestCreateSMSDefinition > CreateSMSDefinitionWithHttpInfo (RequestCreateSMSDefinition body = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// createSMSDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateSMSDefinition> CreateSMSDefinitionAsync (RequestCreateSMSDefinition body = null)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = await CreateSMSDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createSMSDefinition Creates the definition for an SMS.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> CreateSMSDefinitionAsyncWithHttpInfo (RequestCreateSMSDefinition body = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ResponseDeleteSendDefinition</returns>
        public ResponseDeleteSendDefinition DeleteEmailDefinition (string definitionKey)
        {
             ApiResponse<ResponseDeleteSendDefinition> localVarResponse = DeleteEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of ResponseDeleteSendDefinition</returns>
        public ApiResponse< ResponseDeleteSendDefinition > DeleteEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteSendDefinition)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ResponseDeleteSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseDeleteSendDefinition> DeleteEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseDeleteSendDefinition> localVarResponse = await DeleteEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteEmailDefinition Deletes an email definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (ResponseDeleteSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDeleteSendDefinition>> DeleteEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteSendDefinition)));
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public ResponseDeleteQueuedMessagesForSendDefinition DeleteQueuedMessagesForEmailDefinition (string definitionKey)
        {
             ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> localVarResponse = DeleteQueuedMessagesForEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public ApiResponse< ResponseDeleteQueuedMessagesForSendDefinition > DeleteQueuedMessagesForEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteQueuedMessagesForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteQueuedMessagesForSendDefinition)));
        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> localVarResponse = await DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteQueuedMessagesForEmailDefinition Deletes the queue for an email definition. The email definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (ResponseDeleteQueuedMessagesForSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>> DeleteQueuedMessagesForEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteQueuedMessagesForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteQueuedMessagesForSendDefinition)));
        }

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public ResponseDeleteQueuedMessagesForSendDefinition DeleteQueuedMessagesForSMSDefinition (string definitionKey)
        {
             ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> localVarResponse = DeleteQueuedMessagesForSMSDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public ApiResponse< ResponseDeleteQueuedMessagesForSendDefinition > DeleteQueuedMessagesForSMSDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteQueuedMessagesForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteQueuedMessagesForSendDefinition)));
        }

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ResponseDeleteQueuedMessagesForSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseDeleteQueuedMessagesForSendDefinition> DeleteQueuedMessagesForSMSDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition> localVarResponse = await DeleteQueuedMessagesForSMSDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteQueuedMessagesForSMSDefinition Deletes the queue for a SMS definition. The SMS definition must be in inactive status.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (ResponseDeleteQueuedMessagesForSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>> DeleteQueuedMessagesForSMSDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteQueuedMessagesForSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQueuedMessagesForSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteQueuedMessagesForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteQueuedMessagesForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteQueuedMessagesForSendDefinition)));
        }

        /// <summary>
        /// deleteSMSDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ResponseDeleteSendDefinition</returns>
        public ResponseDeleteSendDefinition DeleteSMSDefinition (string definitionKey)
        {
             ApiResponse<ResponseDeleteSendDefinition> localVarResponse = DeleteSMSDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteSMSDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of ResponseDeleteSendDefinition</returns>
        public ApiResponse< ResponseDeleteSendDefinition > DeleteSMSDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteSendDefinition)));
        }

        /// <summary>
        /// deleteSMSDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ResponseDeleteSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseDeleteSendDefinition> DeleteSMSDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseDeleteSendDefinition> localVarResponse = await DeleteSMSDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteSMSDefinition Deletes an sms definition. You can&#39;t restore a deleted definition. The deleted definition is archived, and a delete location of the definition key is provided in the response for reference. You can reuse a deleted definition key because the information associated with it is copied to a new unique identifier.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (ResponseDeleteSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDeleteSendDefinition>> DeleteSMSDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->DeleteSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDeleteSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDeleteSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDeleteSendDefinition)));
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        public RequestCreateEmailDefinition GetEmailDefinition (string definitionKey)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = GetEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        public ApiResponse< RequestCreateEmailDefinition > GetEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateEmailDefinition> GetEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = await GetEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinition Gets email definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> GetEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ResponseGetEmailDefinitions</returns>
        public ResponseGetEmailDefinitions GetEmailDefinitions (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<ResponseGetEmailDefinitions> localVarResponse = GetEmailDefinitionsWithHttpInfo(status, pageSize, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of ResponseGetEmailDefinitions</returns>
        public ApiResponse< ResponseGetEmailDefinitions > GetEmailDefinitionsWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetEmailDefinitions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetEmailDefinitions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetEmailDefinitions)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ResponseGetEmailDefinitions</returns>
        public async System.Threading.Tasks.Task<ResponseGetEmailDefinitions> GetEmailDefinitionsAsync (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<ResponseGetEmailDefinitions> localVarResponse = await GetEmailDefinitionsAsyncWithHttpInfo(status, pageSize, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinitions Gets a list of email definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetEmailDefinitions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetEmailDefinitions>> GetEmailDefinitionsAsyncWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetEmailDefinitions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetEmailDefinitions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetEmailDefinitions)));
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ResponseGetDefinitionSendStatusForRecipient</returns>
        public ResponseGetDefinitionSendStatusForRecipient GetEmailSendStatusForRecipient (string messageKey)
        {
             ApiResponse<ResponseGetDefinitionSendStatusForRecipient> localVarResponse = GetEmailSendStatusForRecipientWithHttpInfo(messageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of ResponseGetDefinitionSendStatusForRecipient</returns>
        public ApiResponse< ResponseGetDefinitionSendStatusForRecipient > GetEmailSendStatusForRecipientWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetEmailSendStatusForRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionSendStatusForRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionSendStatusForRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionSendStatusForRecipient)));
        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ResponseGetDefinitionSendStatusForRecipient</returns>
        public async System.Threading.Tasks.Task<ResponseGetDefinitionSendStatusForRecipient> GetEmailSendStatusForRecipientAsync (string messageKey)
        {
             ApiResponse<ResponseGetDefinitionSendStatusForRecipient> localVarResponse = await GetEmailSendStatusForRecipientAsyncWithHttpInfo(messageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide it in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionSendStatusForRecipient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionSendStatusForRecipient>> GetEmailSendStatusForRecipientAsyncWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetEmailSendStatusForRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionSendStatusForRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionSendStatusForRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionSendStatusForRecipient)));
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ResponseGetDefinitionsNotSentToRecipients</returns>
        public ResponseGetDefinitionsNotSentToRecipients GetEmailsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<ResponseGetDefinitionsNotSentToRecipients> localVarResponse = GetEmailsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of ResponseGetDefinitionsNotSentToRecipients</returns>
        public ApiResponse< ResponseGetDefinitionsNotSentToRecipients > GetEmailsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetEmailsNotSentToRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionsNotSentToRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionsNotSentToRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionsNotSentToRecipients)));
        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ResponseGetDefinitionsNotSentToRecipients</returns>
        public async System.Threading.Tasks.Task<ResponseGetDefinitionsNotSentToRecipients> GetEmailsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<ResponseGetDefinitionsNotSentToRecipients> localVarResponse = await GetEmailsNotSentToRecipientsAsyncWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionsNotSentToRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionsNotSentToRecipients>> GetEmailsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetEmailsNotSentToRecipients");

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionsNotSentToRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionsNotSentToRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionsNotSentToRecipients)));
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ResponseGetQueueMetricsForSendDefinition</returns>
        public ResponseGetQueueMetricsForSendDefinition GetQueueMetricsForEmailDefinition (string definitionKey)
        {
             ApiResponse<ResponseGetQueueMetricsForSendDefinition> localVarResponse = GetQueueMetricsForEmailDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>ApiResponse of ResponseGetQueueMetricsForSendDefinition</returns>
        public ApiResponse< ResponseGetQueueMetricsForSendDefinition > GetQueueMetricsForEmailDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetQueueMetricsForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetQueueMetricsForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetQueueMetricsForSendDefinition)));
        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ResponseGetQueueMetricsForSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForEmailDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseGetQueueMetricsForSendDefinition> localVarResponse = await GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getQueueMetricsForEmailDefinition Gets metrics for the messages of an email definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the email definition</param>
        /// <returns>Task of ApiResponse (ResponseGetQueueMetricsForSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetQueueMetricsForSendDefinition>> GetQueueMetricsForEmailDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetQueueMetricsForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetQueueMetricsForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetQueueMetricsForSendDefinition)));
        }

        /// <summary>
        /// getQueueMetricsForSMSDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ResponseGetQueueMetricsForSendDefinition</returns>
        public ResponseGetQueueMetricsForSendDefinition GetQueueMetricsForSMSDefinition (string definitionKey)
        {
             ApiResponse<ResponseGetQueueMetricsForSendDefinition> localVarResponse = GetQueueMetricsForSMSDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getQueueMetricsForSMSDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>ApiResponse of ResponseGetQueueMetricsForSendDefinition</returns>
        public ApiResponse< ResponseGetQueueMetricsForSendDefinition > GetQueueMetricsForSMSDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetQueueMetricsForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetQueueMetricsForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetQueueMetricsForSendDefinition)));
        }

        /// <summary>
        /// getQueueMetricsForSMSDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ResponseGetQueueMetricsForSendDefinition</returns>
        public async System.Threading.Tasks.Task<ResponseGetQueueMetricsForSendDefinition> GetQueueMetricsForSMSDefinitionAsync (string definitionKey)
        {
             ApiResponse<ResponseGetQueueMetricsForSendDefinition> localVarResponse = await GetQueueMetricsForSMSDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getQueueMetricsForSMSDefinition Gets metrics for the messages of a SMS definition. Applies to messages that are accepted but not yet processed.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the SMS definition</param>
        /// <returns>Task of ApiResponse (ResponseGetQueueMetricsForSendDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetQueueMetricsForSendDefinition>> GetQueueMetricsForSMSDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetQueueMetricsForSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}/queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQueueMetricsForSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetQueueMetricsForSendDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetQueueMetricsForSendDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetQueueMetricsForSendDefinition)));
        }

        /// <summary>
        /// getSMSDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        public RequestCreateSMSDefinition GetSMSDefinition (string definitionKey)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = GetSMSDefinitionWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSMSDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        public ApiResponse< RequestCreateSMSDefinition > GetSMSDefinitionWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// getSMSDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateSMSDefinition> GetSMSDefinitionAsync (string definitionKey)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = await GetSMSDefinitionAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSMSDefinition Gets SMS definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> GetSMSDefinitionAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->GetSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// getSMSDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ResponseGetSMSDefinitions</returns>
        public ResponseGetSMSDefinitions GetSMSDefinitions (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<ResponseGetSMSDefinitions> localVarResponse = GetSMSDefinitionsWithHttpInfo(status, pageSize, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSMSDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of ResponseGetSMSDefinitions</returns>
        public ApiResponse< ResponseGetSMSDefinitions > GetSMSDefinitionsWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetSMSDefinitions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetSMSDefinitions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetSMSDefinitions)));
        }

        /// <summary>
        /// getSMSDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ResponseGetSMSDefinitions</returns>
        public async System.Threading.Tasks.Task<ResponseGetSMSDefinitions> GetSMSDefinitionsAsync (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<ResponseGetSMSDefinitions> localVarResponse = await GetSMSDefinitionsAsyncWithHttpInfo(status, pageSize, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSMSDefinitions Gets a list of SMS definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetSMSDefinitions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetSMSDefinitions>> GetSMSDefinitionsAsyncWithHttpInfo (string status = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/sms/definitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetSMSDefinitions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetSMSDefinitions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetSMSDefinitions)));
        }

        /// <summary>
        /// getSMSSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ResponseGetDefinitionSendStatusForRecipient</returns>
        public ResponseGetDefinitionSendStatusForRecipient GetSMSSendStatusForRecipient (string messageKey)
        {
             ApiResponse<ResponseGetDefinitionSendStatusForRecipient> localVarResponse = GetSMSSendStatusForRecipientWithHttpInfo(messageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSMSSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>ApiResponse of ResponseGetDefinitionSendStatusForRecipient</returns>
        public ApiResponse< ResponseGetDefinitionSendStatusForRecipient > GetSMSSendStatusForRecipientWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetSMSSendStatusForRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionSendStatusForRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionSendStatusForRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionSendStatusForRecipient)));
        }

        /// <summary>
        /// getSMSSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ResponseGetDefinitionSendStatusForRecipient</returns>
        public async System.Threading.Tasks.Task<ResponseGetDefinitionSendStatusForRecipient> GetSMSSendStatusForRecipientAsync (string messageKey)
        {
             ApiResponse<ResponseGetDefinitionSendStatusForRecipient> localVarResponse = await GetSMSSendStatusForRecipientAsyncWithHttpInfo(messageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSMSSendStatusForRecipient Gets the send status for a message. Because this route is rate-limited, use it for infrequent verification of a messageKey. To collect send status at scale, subscribe to transactional send events using the Event Notification Service.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier to track message send status. You must provide it in singleton requests using the recipient attribute. To provide message key in batch requests, use the recipients array attribute. If you don’t provide the message key for recipients, it’s generated in the response.</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionSendStatusForRecipient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionSendStatusForRecipient>> GetSMSSendStatusForRecipientAsyncWithHttpInfo (string messageKey)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->GetSMSSendStatusForRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSSendStatusForRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionSendStatusForRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionSendStatusForRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionSendStatusForRecipient)));
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ResponseGetDefinitionsNotSentToRecipients</returns>
        public ResponseGetDefinitionsNotSentToRecipients GetSMSsNotSentToRecipients (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<ResponseGetDefinitionsNotSentToRecipients> localVarResponse = GetSMSsNotSentToRecipientsWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>ApiResponse of ResponseGetDefinitionsNotSentToRecipients</returns>
        public ApiResponse< ResponseGetDefinitionsNotSentToRecipients > GetSMSsNotSentToRecipientsWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetSMSsNotSentToRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionsNotSentToRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionsNotSentToRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionsNotSentToRecipients)));
        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ResponseGetDefinitionsNotSentToRecipients</returns>
        public async System.Threading.Tasks.Task<ResponseGetDefinitionsNotSentToRecipients> GetSMSsNotSentToRecipientsAsync (string type, int? pageSize = null, int? lastEventId = null)
        {
             ApiResponse<ResponseGetDefinitionsNotSentToRecipients> localVarResponse = await GetSMSsNotSentToRecipientsAsyncWithHttpInfo(type, pageSize, lastEventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getSMSsNotSentToRecipients Gets a paginated list of messages that were not sent, ordered from oldest to newest.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Only notSent is supported.</param>
        /// <param name="pageSize">Number of messageKeys (array elements) to return per response page. (optional)</param>
        /// <param name="lastEventId">Event ID from which you want the response to start. To obtain the initial event ID, submit a request without a lastEventId. The events in the response are listed top to bottom from oldest to newest. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGetDefinitionsNotSentToRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGetDefinitionsNotSentToRecipients>> GetSMSsNotSentToRecipientsAsyncWithHttpInfo (string type, int? pageSize = null, int? lastEventId = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TransactionalMessagingApi->GetSMSsNotSentToRecipients");

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (lastEventId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastEventId", lastEventId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSMSsNotSentToRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGetDefinitionsNotSentToRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGetDefinitionsNotSentToRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGetDefinitionsNotSentToRecipients)));
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateEmailDefinition</returns>
        public RequestCreateEmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, RequestUpdateEmailDefinition body = null)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = PartiallyUpdateEmailDefinitionWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateEmailDefinition</returns>
        public ApiResponse< RequestCreateEmailDefinition > PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, RequestUpdateEmailDefinition body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateEmailDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateEmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, RequestUpdateEmailDefinition body = null)
        {
             ApiResponse<RequestCreateEmailDefinition> localVarResponse = await PartiallyUpdateEmailDefinitionAsyncWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// partiallyUpdateEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateEmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateEmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, RequestUpdateEmailDefinition body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateEmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateEmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateEmailDefinition)));
        }

        /// <summary>
        /// partiallyUpdateSMSDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>RequestCreateSMSDefinition</returns>
        public RequestCreateSMSDefinition PartiallyUpdateSMSDefinition (string definitionKey, RequestCreateSMSDefinition body = null)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = PartiallyUpdateSMSDefinitionWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// partiallyUpdateSMSDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of RequestCreateSMSDefinition</returns>
        public ApiResponse< RequestCreateSMSDefinition > PartiallyUpdateSMSDefinitionWithHttpInfo (string definitionKey, RequestCreateSMSDefinition body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// partiallyUpdateSMSDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of RequestCreateSMSDefinition</returns>
        public async System.Threading.Tasks.Task<RequestCreateSMSDefinition> PartiallyUpdateSMSDefinitionAsync (string definitionKey, RequestCreateSMSDefinition body = null)
        {
             ApiResponse<RequestCreateSMSDefinition> localVarResponse = await PartiallyUpdateSMSDefinitionAsyncWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// partiallyUpdateSMSDefinition Updates a specific SMS definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (RequestCreateSMSDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestCreateSMSDefinition>> PartiallyUpdateSMSDefinitionAsyncWithHttpInfo (string definitionKey, RequestCreateSMSDefinition body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling TransactionalMessagingApi->PartiallyUpdateSMSDefinition");

            var localVarPath = "/messaging/v1/sms/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateSMSDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RequestCreateSMSDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RequestCreateSMSDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RequestCreateSMSDefinition)));
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToMultipleRecipients</returns>
        public ResponseSendDefinitionToMultipleRecipients SendEmailToMultipleRecipients (RequestSendEmailToMultipleRecipients body = null)
        {
             ApiResponse<ResponseSendDefinitionToMultipleRecipients> localVarResponse = SendEmailToMultipleRecipientsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToMultipleRecipients</returns>
        public ApiResponse< ResponseSendDefinitionToMultipleRecipients > SendEmailToMultipleRecipientsWithHttpInfo (RequestSendEmailToMultipleRecipients body = null)
        {

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToMultipleRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToMultipleRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToMultipleRecipients)));
        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToMultipleRecipients</returns>
        public async System.Threading.Tasks.Task<ResponseSendDefinitionToMultipleRecipients> SendEmailToMultipleRecipientsAsync (RequestSendEmailToMultipleRecipients body = null)
        {
             ApiResponse<ResponseSendDefinitionToMultipleRecipients> localVarResponse = await SendEmailToMultipleRecipientsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendEmailToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToMultipleRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToMultipleRecipients>> SendEmailToMultipleRecipientsAsyncWithHttpInfo (RequestSendEmailToMultipleRecipients body = null)
        {

            var localVarPath = "/messaging/v1/email/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToMultipleRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToMultipleRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToMultipleRecipients)));
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToSingleRecipient</returns>
        public ResponseSendDefinitionToSingleRecipient SendEmailToSingleRecipient (string messageKey, RequestSendEmailToSingleRecipient body = null)
        {
             ApiResponse<ResponseSendDefinitionToSingleRecipient> localVarResponse = SendEmailToSingleRecipientWithHttpInfo(messageKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToSingleRecipient</returns>
        public ApiResponse< ResponseSendDefinitionToSingleRecipient > SendEmailToSingleRecipientWithHttpInfo (string messageKey, RequestSendEmailToSingleRecipient body = null)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToSingleRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToSingleRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToSingleRecipient)));
        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToSingleRecipient</returns>
        public async System.Threading.Tasks.Task<ResponseSendDefinitionToSingleRecipient> SendEmailToSingleRecipientAsync (string messageKey, RequestSendEmailToSingleRecipient body = null)
        {
             ApiResponse<ResponseSendDefinitionToSingleRecipient> localVarResponse = await SendEmailToSingleRecipientAsyncWithHttpInfo(messageKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendEmailToSingleRecipient Sends a message to a single recipient via an email definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier used to track message status. Can be automatically created when you create a message or provided as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToSingleRecipient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToSingleRecipient>> SendEmailToSingleRecipientAsyncWithHttpInfo (string messageKey, RequestSendEmailToSingleRecipient body = null)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendEmailToSingleRecipient");

            var localVarPath = "/messaging/v1/email/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToSingleRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToSingleRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToSingleRecipient)));
        }

        /// <summary>
        /// sendSMSToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToMultipleRecipients</returns>
        public ResponseSendDefinitionToMultipleRecipients SendSMSToMultipleRecipients (RequestSendSMSToMultipleRecipients body = null)
        {
             ApiResponse<ResponseSendDefinitionToMultipleRecipients> localVarResponse = SendSMSToMultipleRecipientsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendSMSToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToMultipleRecipients</returns>
        public ApiResponse< ResponseSendDefinitionToMultipleRecipients > SendSMSToMultipleRecipientsWithHttpInfo (RequestSendSMSToMultipleRecipients body = null)
        {

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMSToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToMultipleRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToMultipleRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToMultipleRecipients)));
        }

        /// <summary>
        /// sendSMSToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToMultipleRecipients</returns>
        public async System.Threading.Tasks.Task<ResponseSendDefinitionToMultipleRecipients> SendSMSToMultipleRecipientsAsync (RequestSendSMSToMultipleRecipients body = null)
        {
             ApiResponse<ResponseSendDefinitionToMultipleRecipients> localVarResponse = await SendSMSToMultipleRecipientsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendSMSToMultipleRecipients Sends a message to multiple recipients using an email definition. You can provide a messageKey in the request; otherwise, the messageKey is automatically generated in the response.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToMultipleRecipients)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToMultipleRecipients>> SendSMSToMultipleRecipientsAsyncWithHttpInfo (RequestSendSMSToMultipleRecipients body = null)
        {

            var localVarPath = "/messaging/v1/sms/messages/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMSToMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToMultipleRecipients>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToMultipleRecipients) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToMultipleRecipients)));
        }

        /// <summary>
        /// sendSMSToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ResponseSendDefinitionToSingleRecipient</returns>
        public ResponseSendDefinitionToSingleRecipient SendSMSToSingleRecipient (string messageKey, RequestSendSMSToSingleRecipient body = null)
        {
             ApiResponse<ResponseSendDefinitionToSingleRecipient> localVarResponse = SendSMSToSingleRecipientWithHttpInfo(messageKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendSMSToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of ResponseSendDefinitionToSingleRecipient</returns>
        public ApiResponse< ResponseSendDefinitionToSingleRecipient > SendSMSToSingleRecipientWithHttpInfo (string messageKey, RequestSendSMSToSingleRecipient body = null)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendSMSToSingleRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMSToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToSingleRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToSingleRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToSingleRecipient)));
        }

        /// <summary>
        /// sendSMSToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ResponseSendDefinitionToSingleRecipient</returns>
        public async System.Threading.Tasks.Task<ResponseSendDefinitionToSingleRecipient> SendSMSToSingleRecipientAsync (string messageKey, RequestSendSMSToSingleRecipient body = null)
        {
             ApiResponse<ResponseSendDefinitionToSingleRecipient> localVarResponse = await SendSMSToSingleRecipientAsyncWithHttpInfo(messageKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendSMSToSingleRecipient Sends a message to a single recipient via a SMS definition using a messageKey path parameter.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageKey">Unique identifier of the definition used to track message status. The messageKey can be created automatically when you create a message, or you can provide it as part of the request. Each recipient in a request must have a unique messageKey. If you use a duplicate messageKey in the same send request, the message is rejected.</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSendDefinitionToSingleRecipient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSendDefinitionToSingleRecipient>> SendSMSToSingleRecipientAsyncWithHttpInfo (string messageKey, RequestSendSMSToSingleRecipient body = null)
        {
            // verify the required parameter 'messageKey' is set
            if (messageKey == null)
                throw new ApiException(400, "Missing required parameter 'messageKey' when calling TransactionalMessagingApi->SendSMSToSingleRecipient");

            var localVarPath = "/messaging/v1/sms/messages/{messageKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (messageKey != null) localVarPathParams.Add("messageKey", this.Configuration.ApiClient.ParameterToString(messageKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMSToSingleRecipient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSendDefinitionToSingleRecipient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSendDefinitionToSingleRecipient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSendDefinitionToSingleRecipient)));
        }

    }
}
