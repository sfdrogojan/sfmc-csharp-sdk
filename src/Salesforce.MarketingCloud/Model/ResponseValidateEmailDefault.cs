/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// ResponseValidateEmailDefault
    /// </summary>
    [DataContract]
    public partial class ResponseValidateEmailDefault :  IEquatable<ResponseValidateEmailDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseValidateEmailDefault" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseValidateEmailDefault() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseValidateEmailDefault" /> class.
        /// </summary>
        /// <param name="email">Email address that was validated (required).</param>
        /// <param name="failedValidation">Validator that failed: SyntaxValidator, MXValidator, or ListDetectiveValidator (required).</param>
        /// <param name="valid">Whether it was valid or not (required).</param>
        public ResponseValidateEmailDefault(string email = default(string), string failedValidation = default(string), string valid = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for ResponseValidateEmailDefault and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "failedValidation" is required (not null)
            if (failedValidation == null)
            {
                throw new InvalidDataException("failedValidation is a required property for ResponseValidateEmailDefault and cannot be null");
            }
            else
            {
                this.FailedValidation = failedValidation;
            }
            // to ensure "valid" is required (not null)
            if (valid == null)
            {
                throw new InvalidDataException("valid is a required property for ResponseValidateEmailDefault and cannot be null");
            }
            else
            {
                this.Valid = valid;
            }
        }
        
        /// <summary>
        /// Email address that was validated
        /// </summary>
        /// <value>Email address that was validated</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Validator that failed: SyntaxValidator, MXValidator, or ListDetectiveValidator
        /// </summary>
        /// <value>Validator that failed: SyntaxValidator, MXValidator, or ListDetectiveValidator</value>
        [DataMember(Name="failedValidation", EmitDefaultValue=false)]
        public string FailedValidation { get; set; }

        /// <summary>
        /// Whether it was valid or not
        /// </summary>
        /// <value>Whether it was valid or not</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public string Valid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseValidateEmailDefault {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FailedValidation: ").Append(FailedValidation).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseValidateEmailDefault);
        }

        /// <summary>
        /// Returns true if ResponseValidateEmailDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseValidateEmailDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseValidateEmailDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FailedValidation == input.FailedValidation ||
                    (this.FailedValidation != null &&
                    this.FailedValidation.Equals(input.FailedValidation))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FailedValidation != null)
                    hashCode = hashCode * 59 + this.FailedValidation.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
