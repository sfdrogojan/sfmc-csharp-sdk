/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using NUnit.Framework;
using NUnit.Framework.Constraints;
using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Api;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Test
{
    /// <summary>
    ///  Class for testing TransactionalMessagingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TransactionalMessagingApiTests
    {
        private TransactionalMessagingApi transactionalMessagingApiClient;
        private AssetApi assetApiClient;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            transactionalMessagingApiClient = ApiTestSutFactory<TransactionalMessagingApi>.Create();
            assetApiClient = ApiTestSutFactory<AssetApi>.Create();
        }

        [Test]
        public void GetEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionToRetrieveKey = createEmailDefinitionResult.DefinitionKey;

            var getEmailDefinitionResult = transactionalMessagingApiClient.GetEmailDefinition(emailDefinitionToRetrieveKey);

            try
            {
                Assert.AreEqual(emailDefinition.DefinitionKey, getEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, getEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, getEmailDefinitionResult.Content.CustomerKey);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailDefinitionToRetrieveKey);
            }
        }

        [Test]
        public void CreateEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);

            try
            {
                Assert.AreEqual(emailDefinition.DefinitionKey, createEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, createEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, createEmailDefinitionResult.Content.CustomerKey);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(createEmailDefinitionResult.DefinitionKey);
            }
        }

        [Test]
        public void PartiallyUpdateEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionToPartiallyUpdateKey = createEmailDefinitionResult.DefinitionKey;
            var newDescription = new RequestUpdateEmailDefinition("Updated email definition description");

            var partiallyUpdateEmailDefinitionResult = transactionalMessagingApiClient.PartiallyUpdateEmailDefinition(emailDefinitionToPartiallyUpdateKey, newDescription);

            try
            {
                Assert.AreEqual(newDescription.Description, partiallyUpdateEmailDefinitionResult.Description);

                Assert.AreEqual(emailDefinition.DefinitionKey, partiallyUpdateEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, partiallyUpdateEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, partiallyUpdateEmailDefinitionResult.Content.CustomerKey);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailDefinitionToPartiallyUpdateKey);
            }
        }

        [Test]
        public void DeleteEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionToDeleteKey = createEmailDefinitionResult.DefinitionKey;

            try
            {
                var deleteEmailDefinitionResult = transactionalMessagingApiClient.DeleteEmailDefinition(emailDefinitionToDeleteKey);

                Assert.NotNull(deleteEmailDefinitionResult.RequestId);
                Assert.NotNull(deleteEmailDefinitionResult.DeletedDefinitionKey);
                Assert.AreEqual("Success", deleteEmailDefinitionResult.Message);
            }
            catch (ApiException e)
            {
                var deserializedException = JsonConvert.DeserializeObject<ApiError>(e.ErrorContent);

                Assert.AreEqual($"FuelRuntime_ObjectNotFound: Unable to find Definition {emailDefinitionToDeleteKey}", deserializedException.Message);
            }
        }

        [Test]
        public void GetEmailDefinitionsTest()
        {
            var getEmailDefinitionsResult = transactionalMessagingApiClient.GetEmailDefinitions();

            Assert.IsNotNull(getEmailDefinitionsResult.RequestId);
            Assert.IsNotNull(getEmailDefinitionsResult.Definitions);
            Assert.IsNotNull(getEmailDefinitionsResult.Count);
            Assert.IsNotNull(getEmailDefinitionsResult.Page);
            Assert.IsNotNull(getEmailDefinitionsResult.PageSize);
        }

        [Test]
        public void GetQueueMetricsForEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionQueueMetricsToReceiveKey = createEmailDefinitionResult.DefinitionKey;
            
            var getQueueMetricsForEmailDefinitionResult = transactionalMessagingApiClient.GetQueueMetricsForEmailDefinition(emailDefinitionQueueMetricsToReceiveKey);

            try
            {
                Assert.IsNotNull(getQueueMetricsForEmailDefinitionResult.RequestId);
                Assert.IsNotNull(getQueueMetricsForEmailDefinitionResult.Count);
                Assert.IsNotNull(getQueueMetricsForEmailDefinitionResult.AgeSeconds);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailDefinitionQueueMetricsToReceiveKey);
            }
        }

        [Test]
        public void DeleteEmailDefinitionQueueTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            emailDefinition.Status = "inactive"; // Definition status must be inactive to delete queue

            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);

            var emailDefinitionQueToDeleteKey = createEmailDefinitionResult.DefinitionKey;
            var deleteQueuedMessagesForEmailDefinitionResult = transactionalMessagingApiClient.DeleteQueuedMessagesForEmailDefinition(emailDefinitionQueToDeleteKey);

            Assert.NotNull(deleteQueuedMessagesForEmailDefinitionResult.RequestId);
        }

        [Test]
        public void SendEmailToMultipleRecipientsTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailToSendToRecipientsKey = createEmailDefinitionResult.DefinitionKey;

            var recipientsList = new List<Recipient>()
            {
                new Recipient("johnDoe@gmail.com"),
                new Recipient("johannaDoe@yahoo.com")
            };

            var batchMessageRequestBody = new RequestSendEmailToMultipleRecipients(emailToSendToRecipientsKey, recipientsList);
            var sendEmailToMultipleRecipientsResult =
                transactionalMessagingApiClient.SendEmailToMultipleRecipients(batchMessageRequestBody);

            try
            {
                Assert.NotNull(sendEmailToMultipleRecipientsResult.RequestId);
                Assert.NotNull(sendEmailToMultipleRecipientsResult.ErrorCode);
                Assert.NotNull(sendEmailToMultipleRecipientsResult.Responses);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailToSendToRecipientsKey);
            }
        }

        [Test]
        public void SendEmailToSingleRecipientTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailToSendToRecipientKey = createEmailDefinitionResult.DefinitionKey;

            var recipient = new Recipient("johnDoe@gmail.com");
            var messageKey = Guid.NewGuid().ToString();

            var messageRequestBody = new RequestSendEmailToSingleRecipient(emailToSendToRecipientKey, recipient);
            var sendEmailToSingleRecipientResult =
                transactionalMessagingApiClient.SendEmailToSingleRecipient(messageKey, messageRequestBody);

            try
            {
                Assert.NotNull(sendEmailToSingleRecipientResult.RequestId);
                Assert.NotNull(sendEmailToSingleRecipientResult.ErrorCode);
                Assert.NotNull(sendEmailToSingleRecipientResult.Responses);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailToSendToRecipientKey);
            }
        }

        [Test]
        public void GetEmailSendStatusForRecipientTest()
        {
            var emailDefinition = CreateEmailDefinitionObject();
            var createEmailDefinitionResult = transactionalMessagingApiClient.CreateEmailDefinition(emailDefinition);
            var emailToSendToRecipientKey = createEmailDefinitionResult.DefinitionKey;

            var recipient = new Recipient("jonDoe@gmail.com");
            var messageKey = Guid.NewGuid().ToString();

            var messageRequestBody = new RequestSendEmailToSingleRecipient(emailToSendToRecipientKey, recipient);
            transactionalMessagingApiClient.SendEmailToSingleRecipient(messageKey, messageRequestBody);

            var getEmailSendStatusForRecipientResult =
                transactionalMessagingApiClient.GetEmailSendStatusForRecipient(messageKey);

            try
            {
                Assert.NotNull(getEmailSendStatusForRecipientResult.RequestId);
                Assert.NotNull(getEmailSendStatusForRecipientResult.Timestamp);

                var eventCategoryTypes = new Collection<string>()
                {
                    "TransactionalSendEvents.EmailSent",
                    "TransactionalSendEvents.EmailQueued",
                    "TransactionalSendEvents.EmailNotSent"
                };

                CollectionAssert.Contains(eventCategoryTypes, getEmailSendStatusForRecipientResult.EventCategoryType);
            }
            finally
            {
                transactionalMessagingApiClient.DeleteEmailDefinition(emailToSendToRecipientKey);
            }
        }

        [Test]
        public void GetEmailsNotSentToRecipientsTest()
        {
            var getMessagesNotSentToRecipientsResponse = transactionalMessagingApiClient.GetEmailsNotSentToRecipients("notSent");

            Assert.IsNotNull(getMessagesNotSentToRecipientsResponse.RequestId);
            Assert.IsNotNull(getMessagesNotSentToRecipientsResponse.LastEventID);
            Assert.IsNotNull(getMessagesNotSentToRecipientsResponse.Messages);
            Assert.IsNotNull(getMessagesNotSentToRecipientsResponse.Count);
            Assert.IsNotNull(getMessagesNotSentToRecipientsResponse.PageSize);
        }

        private RequestCreateEmailDefinition CreateEmailDefinitionObject()
        {
            var definitionKey = $"{Guid.NewGuid()}";
            var definitionName = $"{Guid.NewGuid()}";

            var emailAsset = CreateAsset();

            try
            {
                var createAssetResult = assetApiClient.CreateAsset(emailAsset);
                var customerKey = createAssetResult.CustomerKey;

                var content = new RequestCreateEmailDefinitionContent(customerKey);

                const string subscribersListKey = "All Subscribers";
                var subscriptions = new RequestCreateEmailDefinitionSubscriptions(subscribersListKey);
                var emailDefinition = new RequestCreateEmailDefinition(definitionName, definitionKey, content: content, subscriptions: subscriptions);

                return emailDefinition;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        private Asset CreateAsset()
        {
            var customerKey = $"{Guid.NewGuid()}";

            var assetName = $"{Guid.NewGuid()}"; // Asset names within a category and asset type must be unique
            var assetDescription = "AssetDescription";
            var assetType = new AssetType(208, "htmlemail", "htmlemail");

            /* The views object is not a required parameter of the Asset constructor.
             Still, we create it and injected into the asset object in order to be able to
             set the email subject. The email subject has to be != null in order to be able
             to trigger the send definition. */

            JObject views = JObject.Parse(@"{
                'subjectline': {
                    'content' : 'New TS Subject Line'
                }
            }");

            var asset = new Asset(customerKey: customerKey, assetType: assetType, name: assetName, description: assetDescription, views: views);

            return asset;
        }
    }
}
