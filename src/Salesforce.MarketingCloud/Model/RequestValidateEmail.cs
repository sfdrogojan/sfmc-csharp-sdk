/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Salesforce.MarketingCloud.Client.SwaggerDateConverter;

namespace Salesforce.MarketingCloud.Model
{
    /// <summary>
    /// RequestValidateEmail
    /// </summary>
    [DataContract]
    public partial class RequestValidateEmail :  IEquatable<RequestValidateEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestValidateEmail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestValidateEmail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestValidateEmail" /> class.
        /// </summary>
        /// <param name="email">Email address to be validated (required).</param>
        /// <param name="validators">List of validators to check email against. Validators include: SyntaxValidator, MXValidator, and ListDetectiveValidator (required).</param>
        public RequestValidateEmail(string email = default(string), List<string> validators = default(List<string>))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for RequestValidateEmail and cannot be null");
            }
            else
            {
                this.Email = email;
            }
            // to ensure "validators" is required (not null)
            if (validators == null)
            {
                throw new InvalidDataException("validators is a required property for RequestValidateEmail and cannot be null");
            }
            else
            {
                this.Validators = validators;
            }
        }
        
        /// <summary>
        /// Email address to be validated
        /// </summary>
        /// <value>Email address to be validated</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// List of validators to check email against. Validators include: SyntaxValidator, MXValidator, and ListDetectiveValidator
        /// </summary>
        /// <value>List of validators to check email against. Validators include: SyntaxValidator, MXValidator, and ListDetectiveValidator</value>
        [DataMember(Name="validators", EmitDefaultValue=false)]
        public List<string> Validators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestValidateEmail {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Validators: ").Append(Validators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestValidateEmail);
        }

        /// <summary>
        /// Returns true if RequestValidateEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestValidateEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestValidateEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Validators == input.Validators ||
                    this.Validators != null &&
                    this.Validators.SequenceEqual(input.Validators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Validators != null)
                    hashCode = hashCode * 59 + this.Validators.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
