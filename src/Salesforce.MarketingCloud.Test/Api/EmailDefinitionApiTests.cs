/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using NUnit.Framework;

using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Api;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Test
{
    /// <summary>
    ///  Class for testing EmailDefinitionApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EmailDefinitionApiTests
    {
        private EmailDefinitionApi emailDefinitionApiClient;
        private AssetApi assetApiClient;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            emailDefinitionApiClient = ApiTestSutFactory<EmailDefinitionApi>.Create();
            assetApiClient = ApiTestSutFactory<AssetApi>.Create();
        }

        [Test]
        public void GetEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinition();
            var createEmailDefinitionResult = emailDefinitionApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionToRetrieveKey = createEmailDefinitionResult.DefinitionKey;

            var getEmailDefinitionResult = emailDefinitionApiClient.GetEmailDefinitionByDefinitionKey(emailDefinitionToRetrieveKey);

            try
            {
                Assert.AreEqual(emailDefinition.DefinitionKey, getEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, getEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, getEmailDefinitionResult.Content.CustomerKey);
                Assert.AreEqual(emailDefinition.Subscriptions.List, getEmailDefinitionResult.Subscriptions.List);
            }
            finally
            {
                emailDefinitionApiClient.DeleteEmailDefinitionByDefinitionKey(emailDefinitionToRetrieveKey);
            }
        }

        [Test]
        public void GetEmailDefinitionsTest()
        {
            var getEmailDefinitionsResponse = emailDefinitionApiClient.GetEmailDefinitions();
            var deserializedEmailDefinitionResponse =
                JsonConvert.DeserializeObject<EmailDefinitionsResponse>(getEmailDefinitionsResponse.ToJson());

            Assert.IsNotNull(deserializedEmailDefinitionResponse.RequestId);
            Assert.IsNotNull(deserializedEmailDefinitionResponse.Definitions);
            Assert.IsNotNull(deserializedEmailDefinitionResponse.Count);
            Assert.IsNotNull(deserializedEmailDefinitionResponse.Page);
            Assert.IsNotNull(deserializedEmailDefinitionResponse.PageSize);
        }

        [Test]
        public void CreateEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinition();
            var createEmailDefinitionResult = emailDefinitionApiClient.CreateEmailDefinition(emailDefinition);

            try
            {
                Assert.AreEqual(emailDefinition.DefinitionKey, createEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, createEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, createEmailDefinitionResult.Content.CustomerKey);
                Assert.AreEqual(emailDefinition.Subscriptions.List, createEmailDefinitionResult.Subscriptions.List);
            }
            finally
            {
                var createEmailDefinitionResultKey = createEmailDefinitionResult.DefinitionKey;
                emailDefinitionApiClient.DeleteEmailDefinitionByDefinitionKey(createEmailDefinitionResultKey);
            }
        }

        [Test]
        public void DeleteEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinition();
            var createEmailDefinitionResult = emailDefinitionApiClient.CreateEmailDefinition(emailDefinition);

            var emailDefinitionToDeleteKey = createEmailDefinitionResult.DefinitionKey;
            var deleteEmailDefinitionResult = emailDefinitionApiClient.DeleteEmailDefinitionByDefinitionKey(emailDefinitionToDeleteKey);

            Assert.AreEqual("Success", deleteEmailDefinitionResult.Message);
            Assert.NotNull(deleteEmailDefinitionResult.RequestId);
        }

        [Test]
        public void PartiallyUpdateEmailDefinitionTest()
        {
            var emailDefinition = CreateEmailDefinition();
            emailDefinition.Description = "Definition description";

            var createEmailDefinitionResult = emailDefinitionApiClient.CreateEmailDefinition(emailDefinition);
            var emailDefinitionToPartiallyUpdateKey = createEmailDefinitionResult.DefinitionKey;

            EmailDefinitionDescription updatedDescription = new EmailDefinitionDescription("Updated definition description");
            var partiallyUpdatedEmailDefinitionResult = emailDefinitionApiClient.PartiallyUpdateEmailDefinition(emailDefinitionToPartiallyUpdateKey, updatedDescription);

            try
            {
                Assert.AreEqual(updatedDescription.Description, partiallyUpdatedEmailDefinitionResult.Description);

                Assert.AreEqual(emailDefinition.DefinitionKey, partiallyUpdatedEmailDefinitionResult.DefinitionKey);
                Assert.AreEqual(emailDefinition.Name, partiallyUpdatedEmailDefinitionResult.Name);
                Assert.AreEqual(emailDefinition.Content.CustomerKey, partiallyUpdatedEmailDefinitionResult.Content.CustomerKey);
                Assert.AreEqual(emailDefinition.Subscriptions.List, partiallyUpdatedEmailDefinitionResult.Subscriptions.List);
            }
            finally
            {
                emailDefinitionApiClient.DeleteEmailDefinitionByDefinitionKey(emailDefinitionToPartiallyUpdateKey);
            }
        }

        private EmailDefinition CreateEmailDefinition()
        {
            var definitionKey = $"{Guid.NewGuid()}";
            var definitionName = $"{Guid.NewGuid()}";

            var emailAsset = CreateAsset();

            try
            {
                var createAssetResult = assetApiClient.CreateAsset(emailAsset);
                var customerKey = createAssetResult.CustomerKey;
                var content = new Content(customerKey);

                var subscribersListKey = "e7942ec9-6585-405e-a3ef-506adfb45b42 - 2093832";
                var subscriptions = new Subscriptions(subscribersListKey);

                var emailDefinition = new EmailDefinition(definitionKey, definitionName, content, subscriptions);

                return emailDefinition;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        private Asset CreateAsset()
        {
            var customerKey = Guid.NewGuid().ToString();
            var name = $"AssetName {Guid.NewGuid()}"; // Asset names within a category and asset type must be unique
            var description = "AssetDescription";
            var assetType = new AssetType(208, "htmlemail", "htmlemail");

            var asset = new Asset(null, customerKey, null, null, assetType, null, null, null, name, description);

            return asset;
        }
    }
}
