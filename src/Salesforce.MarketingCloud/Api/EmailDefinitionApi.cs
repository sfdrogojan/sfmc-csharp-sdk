/* 
 * Marketing Cloud REST API
 *
 * Marketing Cloud's REST API is our newest API. It supports multi-channel use cases, is much more lightweight and easy to use than our SOAP API, and is getting more comprehensive with every release.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mc_sdk@salesforce.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using RestSharp.Authenticators;
using Salesforce.MarketingCloud.Authentication;
using Salesforce.MarketingCloud.Client;
using Salesforce.MarketingCloud.Model;

namespace Salesforce.MarketingCloud.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailDefinitionApi
    {
        #region Synchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition CreateEmailDefinition (EmailDefinition body = null);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> CreateEmailDefinitionWithHttpInfo (EmailDefinition body = null);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>SuccessfulEmailDefinitionDelete</returns>
        SuccessfulEmailDefinitionDelete DeleteEmailDefinitionByDefinitionKey (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of SuccessfulEmailDefinitionDelete</returns>
        ApiResponse<SuccessfulEmailDefinitionDelete> DeleteEmailDefinitionByDefinitionKeyWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets send definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition GetEmailDefinitionByDefinitionKey (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets send definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> GetEmailDefinitionByDefinitionKeyWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of send definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>EmailDefinitionsResponse</returns>
        EmailDefinitionsResponse GetEmailDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of send definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of EmailDefinitionsResponse</returns>
        ApiResponse<EmailDefinitionsResponse> GetEmailDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// patchEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>EmailDefinition</returns>
        EmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, EmailDefinitionDescription body = null);

        /// <summary>
        /// patchEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        ApiResponse<EmailDefinition> PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, EmailDefinitionDescription body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> CreateEmailDefinitionAsync (EmailDefinition body = null);

        /// <summary>
        /// createEmailDefinition
        /// </summary>
        /// <remarks>
        /// Creates the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (EmailDefinition body = null);
        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of SuccessfulEmailDefinitionDelete</returns>
        System.Threading.Tasks.Task<SuccessfulEmailDefinitionDelete> DeleteEmailDefinitionByDefinitionKeyAsync (string definitionKey);

        /// <summary>
        /// deleteEmailDefinition
        /// </summary>
        /// <remarks>
        /// Deletes the definition for an email.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (SuccessfulEmailDefinitionDelete)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessfulEmailDefinitionDelete>> DeleteEmailDefinitionByDefinitionKeyAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets send definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> GetEmailDefinitionByDefinitionKeyAsync (string definitionKey);

        /// <summary>
        /// getEmailDefinition
        /// </summary>
        /// <remarks>
        /// Gets send definition configuration details for a definition key.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> GetEmailDefinitionByDefinitionKeyAsyncWithHttpInfo (string definitionKey);
        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of send definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of EmailDefinitionsResponse</returns>
        System.Threading.Tasks.Task<EmailDefinitionsResponse> GetEmailDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);

        /// <summary>
        /// getEmailDefinitions
        /// </summary>
        /// <remarks>
        /// Gets a list of send definitions.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinitionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinitionsResponse>> GetEmailDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null);
        /// <summary>
        /// patchEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of EmailDefinition</returns>
        System.Threading.Tasks.Task<EmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, EmailDefinitionDescription body = null);

        /// <summary>
        /// patchEmailDefinition
        /// </summary>
        /// <remarks>
        /// Updates a specific email definition.
        /// </remarks>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, EmailDefinitionDescription body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailDefinitionApi : IEmailDefinitionApi
    {
        private Salesforce.MarketingCloud.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDefinitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal EmailDefinitionApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope)
        {
            this.Configuration = new Salesforce.MarketingCloud.Client.Configuration
            {
                AuthenticationInstanceUrl = authBasePath,
                ClientId = clientId,
                ClientSecret = clientSecret,
                AccountId = accountId,
                Scope = scope
            };

            var defaultDateTimeProvider = new DefaultDateTimeProvider();
            var cacheService = new CacheService(defaultDateTimeProvider);
            var apiClient = new ApiClient(authBasePath);
            var authService = new AuthService(this.Configuration, apiClient, cacheService);

            this.Configuration.ApiClient.RestClient.Authenticator =
                new Salesforce.MarketingCloud.Authentication.OAuth2Authenticator(authService);

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDefinitionApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal EmailDefinitionApi(String authBasePath, string clientId, string clientSecret, string accountId, string scope, IAuthenticator authenticator)
            : this(authBasePath, clientId, clientSecret, accountId, scope)
        {
            this.Configuration.ApiClient.RestClient.Authenticator = authenticator;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailDefinitionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal EmailDefinitionApi(Salesforce.MarketingCloud.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Salesforce.MarketingCloud.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Salesforce.MarketingCloud.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        internal String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        internal Salesforce.MarketingCloud.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        internal Salesforce.MarketingCloud.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition CreateEmailDefinition (EmailDefinition body = null)
        {
             ApiResponse<EmailDefinition> localVarResponse = CreateEmailDefinitionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > CreateEmailDefinitionWithHttpInfo (EmailDefinition body = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> CreateEmailDefinitionAsync (EmailDefinition body = null)
        {
             ApiResponse<EmailDefinition> localVarResponse = await CreateEmailDefinitionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// createEmailDefinition Creates the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> CreateEmailDefinitionAsyncWithHttpInfo (EmailDefinition body = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>SuccessfulEmailDefinitionDelete</returns>
        public SuccessfulEmailDefinitionDelete DeleteEmailDefinitionByDefinitionKey (string definitionKey)
        {
             ApiResponse<SuccessfulEmailDefinitionDelete> localVarResponse = DeleteEmailDefinitionByDefinitionKeyWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// deleteEmailDefinition Deletes the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>ApiResponse of SuccessfulEmailDefinitionDelete</returns>
        public ApiResponse< SuccessfulEmailDefinitionDelete > DeleteEmailDefinitionByDefinitionKeyWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->DeleteEmailDefinitionByDefinitionKey");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinitionByDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulEmailDefinitionDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessfulEmailDefinitionDelete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulEmailDefinitionDelete)));
        }

        /// <summary>
        /// deleteEmailDefinition Deletes the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of SuccessfulEmailDefinitionDelete</returns>
        public async System.Threading.Tasks.Task<SuccessfulEmailDefinitionDelete> DeleteEmailDefinitionByDefinitionKeyAsync (string definitionKey)
        {
             ApiResponse<SuccessfulEmailDefinitionDelete> localVarResponse = await DeleteEmailDefinitionByDefinitionKeyAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// deleteEmailDefinition Deletes the definition for an email.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to delete</param>
        /// <returns>Task of ApiResponse (SuccessfulEmailDefinitionDelete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessfulEmailDefinitionDelete>> DeleteEmailDefinitionByDefinitionKeyAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->DeleteEmailDefinitionByDefinitionKey");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEmailDefinitionByDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessfulEmailDefinitionDelete>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessfulEmailDefinitionDelete) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessfulEmailDefinitionDelete)));
        }

        /// <summary>
        /// getEmailDefinition Gets send definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition GetEmailDefinitionByDefinitionKey (string definitionKey)
        {
             ApiResponse<EmailDefinition> localVarResponse = GetEmailDefinitionByDefinitionKeyWithHttpInfo(definitionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinition Gets send definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > GetEmailDefinitionByDefinitionKeyWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->GetEmailDefinitionByDefinitionKey");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitionByDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinition Gets send definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> GetEmailDefinitionByDefinitionKeyAsync (string definitionKey)
        {
             ApiResponse<EmailDefinition> localVarResponse = await GetEmailDefinitionByDefinitionKeyAsyncWithHttpInfo(definitionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinition Gets send definition configuration details for a definition key.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to get</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> GetEmailDefinitionByDefinitionKeyAsyncWithHttpInfo (string definitionKey)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->GetEmailDefinitionByDefinitionKey");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitionByDefinitionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of send definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>EmailDefinitionsResponse</returns>
        public EmailDefinitionsResponse GetEmailDefinitions (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<EmailDefinitionsResponse> localVarResponse = GetEmailDefinitionsWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of send definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>ApiResponse of EmailDefinitionsResponse</returns>
        public ApiResponse< EmailDefinitionsResponse > GetEmailDefinitionsWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinitionsResponse)));
        }

        /// <summary>
        /// getEmailDefinitions Gets a list of send definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of EmailDefinitionsResponse</returns>
        public async System.Threading.Tasks.Task<EmailDefinitionsResponse> GetEmailDefinitionsAsync (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {
             ApiResponse<EmailDefinitionsResponse> localVarResponse = await GetEmailDefinitionsAsyncWithHttpInfo(filter, pageSize, page, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getEmailDefinitions Gets a list of send definitions.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter by status type. Accepted values are active, inactive, or deleted. Valid operations are eq and neq. (optional)</param>
        /// <param name="pageSize">Number of definitions, which are array elements, to return per paged response. (optional)</param>
        /// <param name="page">Page number to return. (optional)</param>
        /// <param name="orderBy">Sort by a dimension. You can sort by only one dimension. Accepted values are definitionKey, name, createdDate, modifiedDate, and status. (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinitionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinitionsResponse>> GetEmailDefinitionsAsyncWithHttpInfo (string filter = null, decimal? pageSize = null, decimal? page = null, string orderBy = null)
        {

            var localVarPath = "/messaging/v1/email/definitions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$filter", filter)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$pageSize", pageSize)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$page", page)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "$orderBy", orderBy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEmailDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinitionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinitionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinitionsResponse)));
        }

        /// <summary>
        /// patchEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>EmailDefinition</returns>
        public EmailDefinition PartiallyUpdateEmailDefinition (string definitionKey, EmailDefinitionDescription body = null)
        {
             ApiResponse<EmailDefinition> localVarResponse = PartiallyUpdateEmailDefinitionWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// patchEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>ApiResponse of EmailDefinition</returns>
        public ApiResponse< EmailDefinition > PartiallyUpdateEmailDefinitionWithHttpInfo (string definitionKey, EmailDefinitionDescription body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

        /// <summary>
        /// patchEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of EmailDefinition</returns>
        public async System.Threading.Tasks.Task<EmailDefinition> PartiallyUpdateEmailDefinitionAsync (string definitionKey, EmailDefinitionDescription body = null)
        {
             ApiResponse<EmailDefinition> localVarResponse = await PartiallyUpdateEmailDefinitionAsyncWithHttpInfo(definitionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// patchEmailDefinition Updates a specific email definition.
        /// </summary>
        /// <exception cref="Salesforce.MarketingCloud.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="definitionKey">Unique identifier of the definition to update</param>
        /// <param name="body">JSON Parameters (optional)</param>
        /// <returns>Task of ApiResponse (EmailDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDefinition>> PartiallyUpdateEmailDefinitionAsyncWithHttpInfo (string definitionKey, EmailDefinitionDescription body = null)
        {
            // verify the required parameter 'definitionKey' is set
            if (definitionKey == null)
                throw new ApiException(400, "Missing required parameter 'definitionKey' when calling EmailDefinitionApi->PartiallyUpdateEmailDefinition");

            var localVarPath = "/messaging/v1/email/definitions/{definitionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (definitionKey != null) localVarPathParams.Add("definitionKey", this.Configuration.ApiClient.ParameterToString(definitionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartiallyUpdateEmailDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDefinition)));
        }

    }
}
